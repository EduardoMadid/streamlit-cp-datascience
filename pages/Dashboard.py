import streamlit as st
import pandas as pd
import plotly.express as px
from io import StringIO
from scipy import stats

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard de Reservas NCR",
    page_icon="üöó",
    layout="wide"
)

st.logo('assets/logo_uber.png', size="large", link='https://www.kaggle.com/datasets/yashdevladdha/uber-ride-analytics-dashboard')

# CSS personalizado para melhorar o visual
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #264653;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #2A9D8F;
        margin: 0.5rem 0;
    }
    .plot-container {
        background-color: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√µes de Pr√©-processamento e Gr√°ficos 
@st.cache_data
def load_data_and_preprocess():
    """Carrega e pr√©-processa o dataset, garantindo o formato correto dos dados."""
    try:
        df = pd.read_csv('data/ncr_ride_bookings.csv')
        
        # C√≥pia do DataFrame original para a compara√ß√£o "antes"
        raw_df = df.copy()
        
        # Convers√£o de tipos de dados para garantir que os c√°lculos funcionem
        df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
        df['Hour'] = pd.to_datetime(df['Time'], format='%H:%M:%S', errors='coerce').dt.hour
        
        # Tratar colunas num√©ricas que podem estar como string
        numeric_cols = ['Booking Value', 'Ride Distance', 'Avg VTAT', 'Avg CTAT', 'Cancelled Rides by Customer', 
                        'Cancelled Rides by Driver', 'Incomplete Rides', 'Driver Ratings', 'Customer Rating']
        for col in numeric_cols:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
        
        # Preencher valores ausentes para evitar erros nos gr√°ficos e m√©tricas
        for col in df.columns:
            if df[col].isnull().sum() > 0:
                if df[col].dtype in ['int64', 'float64']:
                    median_val = df[col].median()
                    df[col].fillna(median_val, inplace=True)
                else:
                    mode_val = df[col].mode()[0]
                    df[col].fillna(mode_val, inplace=True)
                    
        return raw_df, df
    except FileNotFoundError:
        st.error("O arquivo `ncr_ride_bookings.csv` n√£o foi encontrado. Por favor, verifique se o arquivo est√° no diret√≥rio `data/`.")
        st.stop()
    except Exception as e:
        st.error(f"Erro ao carregar ou processar os dados: {e}")
        st.stop()

# Fun√ß√£o para criar gr√°fico de pizza
def create_pie_chart(data, values, names, title, color_sequence=['#2A9D8F', '#E9C46A', '#F4A261', '#E76F51', '#264653']):
    fig = px.pie(
        data, 
        values=values, 
        names=names, 
        title=title,
        color_discrete_sequence=color_sequence or px.colors.qualitative.Set3
    )
    fig.update_traces(textposition='inside', textinfo='percent+label')
    fig.update_layout(
        font=dict(size=12),
        title_font_size=16,
        showlegend=True,
        height=400
    )
    return fig

# Fun√ß√£o para criar gr√°fico de barras
def create_bar_chart(data, x, y, title, color=None):
    fig = px.bar(
        data, 
        x=x, 
        y=y, 
        title=title,
        color=color,
        color_discrete_sequence=['#2A9D8F', '#E9C46A', '#F4A261', '#E76F51', '#264653']
    )
    fig.update_layout(
        font=dict(size=12),
        title_font_size=16,
        xaxis_title=x,
        yaxis_title=y,
        height=400
    )
    return fig

# Fun√ß√£o para criar histograma
def create_histogram(data, x, title, nbins=30):
    fig = px.histogram(
        data, 
        x=x, 
        title=title,
        nbins=nbins,
        color_discrete_sequence=['#2A9D8F', '#E9C46A', '#F4A261', '#E76F51', '#264653']
    )
    fig.update_layout(
        font=dict(size=12),
        title_font_size=16,
        height=400
    )
    return fig

# Fun√ß√£o para criar gr√°fico de linha temporal
def create_time_series(data, x, y, title):
    fig = px.line(
        data, 
        x=x, 
        y=y, 
        title=title,
        color_discrete_sequence=['#2A9D8F', '#E9C46A', '#F4A261', '#E76F51', '#264653']
    )
    fig.update_layout(
        font=dict(size=12),
        title_font_size=16,
        height=400
    )
    return fig

#Carregamento de Dados 
raw_df, df = load_data_and_preprocess()

# T√≠tulo principal
st.markdown('<h1 class="main-header">üöó Dashboard de Reservas NCR</h1>', unsafe_allow_html=True)

# Abas de Navega√ß√£o 
tab_contexto, tab_preprocessamento, tab_classificacao, tab_analise, tab_conclusao = st.tabs([
    "Contexto do Projeto", "Pr√©-processamento", "Classifica√ß√£o das Vari√°veis", "An√°lise de Dados Gerais", "Conclus√£o"
])

# Pagina de contexto
with tab_contexto:
    st.header("1. Contexto do Projeto üìù")
    st.markdown("""
    Este dashboard interativo foi desenvolvido para analisar e visualizar dados de um servi√ßo de reserva de viagens, a Uber, com foco em otimizar a opera√ß√£o e a experi√™ncia do usu√°rio e disponibilizar uma forma de analisar os dados gerais da empresa.

    --- PERGUNTAS DE AN√ÅLISE ---
    - Quais s√£o os hor√°rios de pico de reservas?
    - Quais s√£o os principais motivos de cancelamento?
    - Qual a principal forma de pagamento na India?
    - O valor da corrida e a dist√¢ncia est√£o relacionados de que forma?
    - A dist√¢ncia m√©dia das viagens completadas √© igual a dist√¢ncia m√©dia das viagens incompletas ou canceladas?
    - Os valores das viagens se baseiam em dist√¢ncia ou em outro aspecto?

    As se√ß√µes a seguir detalham as etapas do projeto, desde o tratamento dos dados at√© a apresenta√ß√£o das conclus√µes.

    A baixo temos o dataframe puro, ap√≥s ser baixado no Kaggle:
    """)

    raw_df

# Pagina de Pre-Processamento
with tab_preprocessamento:
    st.header("2. Pr√©-processamento e Tratamento de Dados üõ†Ô∏è")
    st.markdown("""
    A etapa de pr√©-processamento √© a base de qualquer an√°lise de dados confi√°vel. Nela, garantimos a **qualidade, consist√™ncia e o formato correto** dos dados para que os c√°lculos e visualiza√ß√µes n√£o apresentem erros.
    Para este dashboard, realizamos as seguintes a√ß√µes:
    - **Convers√£o de Tipos:** Garantimos que colunas como 'Date', 'Time' e outras num√©ricas estejam no formato correto.
    - **Tratamento de Dados Ausentes:** Lidamos com valores em branco (`NaN`) preenchendo-os com a mediana ou a moda para evitar falhas nos gr√°ficos e c√°lculos.
    - **Retirada de Duplicatas** Lidamos com valores duplicados retirando as duplicatas para maior efici√™ncia dos dados.
    """)
    st.markdown("### Dados Antes e Depois do Tratamento üî¨")
    st.markdown("Veja o impacto do pr√©-processamento. A tabela abaixo √† esquerda mostra os dados com valores ausentes e os tipos originais, enquanto a tabela √† direita mostra o resultado ap√≥s a limpeza e convers√£o.")

    col_before, col_after = st.columns(2)

    with col_before:
        st.markdown("#### **Antes do Tratamento**")
        st.info("Valores nulos por coluna (antes):")
        st.dataframe(raw_df.isnull().sum().astype(str), use_container_width=True)
        st.info("Tipos de Dados (antes):")
        buffer = StringIO()
        raw_df.info(buf=buffer)
        s = buffer.getvalue()
        st.code(s)

    with col_after:
        st.markdown("#### **Depois do Tratamento**")
        st.success("Valores nulos por coluna (depois):")
        st.dataframe(df.isnull().sum().astype(str), use_container_width=True)
        st.success("Tipos de Dados (depois):")
        buffer = StringIO()
        df.info(buf=buffer)
        s = buffer.getvalue()
        st.code(s)

    st.success("Dados carregados e pr√©-processados com sucesso!")

# Pagina de Classifica√ß√£o de Variaveis
with tab_classificacao:
    st.header("3. Classifica√ß√£o das Vari√°veis üìä")
    st.markdown("""
    A classifica√ß√£o das vari√°veis √© um passo fundamental da an√°lise explorat√≥ria. Entender o tipo de dado que estamos trabalhando nos ajuda a escolher os m√©todos estat√≠sticos e os tipos de gr√°ficos mais adequados.
    
    ### **Tipos de Vari√°veis**
    - **Vari√°veis Qualitativas (ou Categ√≥ricas):** Representam caracter√≠sticas uma classifica√ß√£o por tipo ou atributo.
        - `Nominais`: Caracter√≠sticas e atributos que n√£o podem ser ordenados.
        - `Ordinais`: Caracter√≠sticas e atributos que podem ser ordenados.

    - **Vari√°veis Quantitativas (ou Num√©ricas):** Representam quantidades que podem ser medidas ou contadas, ou seja possuem uma escala de mensura√ß√£o n√∫merica.
        - `Discretas`: Entre dois pontos da escala existe n√∫mero finito de valores.
        - `Cont√≠nuas`: Entre dois pontos da escala existe n√∫mero infinito de valores.
    """)
    
    st.markdown("#### **Classifica√ß√£o Completa das Vari√°veis do Dataset**")
    
    # Dicion√°rio com a classifica√ß√£o correta e a justificativa para cada coluna do DF
    classification_data = {
        'Variable': [],
        'Type': [],
        'Justification': []
    }
    
    # Mapeamento completo e correto das vari√°veis
    variable_info = {
        'Date': {'type': 'Quantitativa (Cont√≠nua)', 'justification': 'A data pode ser representada numericamente e assume valores em uma escala cont√≠nua e permitindo compara√ß√µes.'},
        'Vehicle Type': {'type': 'Qualitativa (Nominal)', 'justification': 'Classifica os ve√≠culos em categorias, sem hierarquia entre eles.'},
        'Booking ID': {'type':'ID', 'justification':'ID √∫nico para cada pedido de viagem.'},
        'Booking Status': {'type': 'Qualitativa (Nominal)', 'justification': 'Categoriza o status das reservas, como "Completed" ou "Cancelled".'},
        'Customer ID': {'type':'ID', 'justification':'ID √∫nico para cada usu√°rio.'},
        'Booking Value': {'type': 'Quantitativa (Cont√≠nua)', 'justification': 'Representa um valor monet√°rio que pode ter casas decimais.'},
        'Ride Distance': {'type': 'Quantitativa (Cont√≠nua)', 'justification': 'A dist√¢ncia percorrida √© uma medida cont√≠nua, podendo ser fracionada.'},
        'Pickup Location': {'type': 'Qualitativa (Nominal)', 'justification': 'Nomes de locais s√£o categorias nominais, sem ordem.'},
        'Drop Location': {'type': 'Qualitativa (Nominal)', 'justification': 'Nomes de locais s√£o categorias nominais, sem ordem.'},
        'Payment Method': {'type': 'Qualitativa (Nominal)', 'justification': 'Tipos de pagamento s√£o categorias distintas, sem hierarquia.'},
        'Reason for cancelling by Customer': {'type': 'Qualitativa (Nominal)', 'justification': 'As raz√µes de cancelamento s√£o r√≥tulos categ√≥ricos.'},
        'Driver Cancellation Reason': {'type': 'Qualitativa (Nominal)', 'justification': 'As raz√µes de cancelamento por motorista s√£o r√≥tulos categ√≥ricos.'},
        'Incomplete Rides Reason':{'type':'Qualitativa (Nominal)', 'justification':'As raz√µes de viagens canceladas s√£o r√≥tulos categ√≥ricos, sem ordem.' },
        'Trip Duration': {'type': 'Quantitativa (Cont√≠nua)', 'justification': 'A dura√ß√£o de uma viagem √© uma medida de tempo, que pode ser cont√≠nua.'},
        'Driver Ratings': {'type': 'Quantitativa (Discreta)', 'justification': 'S√£o notas inteiras (ex: 1 a 5), uma contagem discreta de estrelas.'},
        'Customer Rating': {'type': 'Quantitativa (Discreta)', 'justification': 'S√£o notas inteiras, uma contagem discreta de estrelas.'},
        'Cancelled Rides by Customer': {'type': 'Quantitativa (Discreta)', 'justification': '√â uma contagem de eventos de cancelamento, em n√∫meros inteiros.'},
        'Cancelled Rides by Driver': {'type': 'Quantitativa (Discreta)', 'justification': '√â uma contagem de eventos de cancelamento, em n√∫meros inteiros.'},
        'Incomplete Rides': {'type': 'Quantitativa (Discreta)', 'justification': '√â uma contagem de viagens incompletas, em n√∫meros inteiros.'},
        'Avg VTAT': {'type': 'Quantitativa (Cont√≠nua)', 'justification': 'Representa a m√©dia de tempo, que √© um valor cont√≠nuo.'},
        'Avg CTAT': {'type': 'Quantitativa (Cont√≠nua)', 'justification': 'Representa a m√©dia de tempo, que √© um valor cont√≠nuo.'},
        'Time': {'type': 'Qualitativa (Nominal)', 'justification': 'Embora represente um ponto no tempo, √© usado como categoria para agrupar as viagens.'},
        'Hour': {'type': 'Quantitativa (Cont√≠nua)', 'justification': '√â uma vari√°vel inteira derivada do tempo, sendo continuamente medida.'},
    }

    for col in df.columns:
        if col in variable_info:
            classification_data['Variable'].append(col)
            classification_data['Type'].append(variable_info[col]['type'])
            classification_data['Justification'].append(variable_info[col]['justification'])
        else:
            classification_data['Variable'].append(col)
            classification_data['Type'].append('Desconhecido')
            classification_data['Justification'].append('N√£o classificado.')
    
    classification_df = pd.DataFrame(classification_data)
    
    st.dataframe(classification_df, use_container_width=True, height=810)

# Pagina de Analise de Dados
with tab_analise:
    st.header("4. An√°lise dos Dados üìä")
    st.markdown("Use os filtros abaixo para segmentar os dados e realizar an√°lises mais espec√≠ficas. Esses filtros determinam os dados de todos as an√°lises e gr√°ficos abaixo.")

    # ----------------- Filtros -----------------
    date_range = st.date_input(
        "Selecione o per√≠odo:",
        value=(df['Date'].min().date(), df['Date'].max().date()),
        min_value=df['Date'].min().date(),
        max_value=df['Date'].max().date()
    )
    
    col_multi_1, col_multi_2 = st.columns(2)

    with col_multi_1:
        vehicle_types = st.multiselect(
            "Tipo de Ve√≠culo:",
            options=df['Vehicle Type'].unique(),
            default=df['Vehicle Type'].unique()
        )

    with col_multi_2:
        booking_status = st.multiselect(
            "Status da Reserva:",
            options=df['Booking Status'].unique(),
            default=df['Booking Status'].unique()
        )

    # Aplicar filtros
    if len(date_range) == 2:
        start_date, end_date = date_range
        filtered_df = df[
            (df['Date'].dt.date >= start_date) & 
            (df['Date'].dt.date <= end_date) &
            (df['Vehicle Type'].isin(vehicle_types)) &
            (df['Booking Status'].isin(booking_status))
        ]
    else:
        filtered_df = df[
            (df['Vehicle Type'].isin(vehicle_types)) &
            (df['Booking Status'].isin(booking_status))
        ]

    '---'
    # ----------------- KPIs Principais -----------------
    st.subheader("Indicadores Chave de Performance (KPIs) üìà")
    st.markdown("Os KPIs (do ingl√™s *Key Performance Indicators*) s√£o m√©tricas essenciais que nos d√£o uma vis√£o r√°pida da sa√∫de e do desempenho do neg√≥cio, ou seja, conseguimos obter uma vis√£o geral de forma intuitiva.")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_bookings = len(filtered_df)
        st.metric("Total de Reservas", f"{total_bookings:,}")

    with col2:
        completed_rides = len(filtered_df[filtered_df['Booking Status'] == 'Completed'])
        completion_rate = (completed_rides / total_bookings * 100) if total_bookings > 0 else 0
        st.metric("Taxa de Conclus√£o", f"{completion_rate:.1f}%")

    with col3:
        avg_booking_value = filtered_df['Booking Value'].mean()
        if not pd.isna(avg_booking_value):
            st.metric("Valor M√©dio da Reserva", f"‚Çπ{avg_booking_value:.2f}")
        else:
            st.metric("Valor M√©dio da Reserva", "N/A")

    with col4:
        avg_distance = filtered_df['Ride Distance'].mean()
        if not pd.isna(avg_distance):
            st.metric("Dist√¢ncia M√©dia", f"{avg_distance:.2f} km")
        else:
            st.metric("Dist√¢ncia M√©dia", "N/A")
    '---'

    # ----------------- An√°lise de Status e Ve√≠culos -----------------
    st.subheader("An√°lise de Status e Ve√≠culos üìä")
    st.markdown("O gr√°fico de pizza √© excelente para mostrar a **composi√ß√£o de um todo**, enquanto o de barras √© ideal para **comparar categorias**. ")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### Distribui√ß√£o do Status das Reservas")
        st.markdown("Este gr√°fico mostra a propor√ß√£o de cada status de reserva, permitindo identificar rapidamente o percentual de viagens completadas, canceladas ou incompletas.")
        status_counts = filtered_df['Booking Status'].value_counts()
        fig_status = create_pie_chart(
            status_counts.reset_index(), 
            'count', 
            'Booking Status', 
            "",
            color_sequence= ['#2A9D8F', '#E9C46A', '#F4A261', '#E76F51', '#264653']
        )
        st.plotly_chart(fig_status, use_container_width=True)

    with col2:
        st.markdown("#### Distribui√ß√£o por Tipo de Ve√≠culo")
        st.markdown("Aqui, visualizamos a participa√ß√£o de mercado de cada tipo de ve√≠culo, mostrando quais s√£o os mais populares entre os clientes.")
        vehicle_counts = filtered_df['Vehicle Type'].value_counts()
        fig_vehicle = create_bar_chart(
            vehicle_counts.reset_index(), 
            'Vehicle Type', 
            'count', 
            "",
            color='Vehicle Type'
        )
        st.plotly_chart(fig_vehicle, use_container_width=True)

    st.subheader("Resumo dos Gr√°ficos üìà")
    st.markdown("√â poss√≠vel entender pelos gr√°ficos que muitas corridas n√£o s√£o completadas (`38%`). Al√©m disso, o ve√≠culo mais utilizado na √çndia para realizar essas corridas √© o (`Auto`)")

    '---'
    
    # ----------------- An√°lise Financeira e de Dist√¢ncia -----------------
    st.subheader("An√°lise de Valores e Dist√¢ncias üí∞")
    st.markdown("Histogramas s√£o perfeitos para visualizar a **distribui√ß√£o de vari√°veis cont√≠nuas**. Eles nos ajudam a entender a frequ√™ncia de diferentes valores, como a maioria das corridas est√£o concentradas em uma faixa de pre√ßo ou dist√¢ncia.")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### Distribui√ß√£o dos Valores de Reserva")
        st.markdown("Analisar a distribui√ß√£o dos valores nos permite entender a faixa de pre√ßo mais comum das corridas e identificar poss√≠veis outliers (valores muito altos ou baixos).")
        booking_values = filtered_df.dropna(subset=['Booking Value'])
        if not booking_values.empty:
            fig_value = create_histogram(
                booking_values, 
                'Booking Value', 
                ""
            )
            st.plotly_chart(fig_value, use_container_width=True)
        else:
            st.info("Dados de valor de reserva n√£o dispon√≠veis para o filtro selecionado.")

    with col2:
        st.markdown("#### Distribui√ß√£o das Dist√¢ncias das Viagens")
        st.markdown("Da mesma forma, a distribui√ß√£o das dist√¢ncias mostra se as viagens tendem a ser curtas, m√©dias ou longas, um insight valioso para o planejamento de rotas e precifica√ß√£o.")
        ride_distances = filtered_df.dropna(subset=['Ride Distance'])
        if not ride_distances.empty:
            fig_distance = create_histogram(
                ride_distances, 
                'Ride Distance', 
                ""
            )
            st.plotly_chart(fig_distance, use_container_width=True)
        else:
            st.info("Dados de dist√¢ncia n√£o dispon√≠veis para o filtro selecionado.")

    st.subheader("Resumo dos Gr√°ficos üìà")
    st.markdown("√â poss√≠vel entender pelos gr√°ficos que a faixa de pre√ßo mais comum nas corridas √© entre (`400-599 rupias indianas`). Al√©m disso, a m√©dia de tempo das viagens √© entre (`23 - 25 minutos`).")

    '---'
    # ----------------- An√°lise de Avalia√ß√µes -----------------
    st.subheader("An√°lise de Avalia√ß√µes ‚≠ê")
    st.markdown("As avalia√ß√µes s√£o um indicador direto da **satisfa√ß√£o de clientes e motoristas**. A distribui√ß√£o das notas nos ajuda a identificar se o servi√ßo atende √†s expectativas ou se h√° pontos de melhoria.")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### Distribui√ß√£o das Avalia√ß√µes dos Motoristas")
        st.markdown("Uma alta concentra√ß√£o de avalia√ß√µes 5 estrelas sugere que os motoristas est√£o performando bem. O histograma revela a frequ√™ncia de cada nota.")
        driver_ratings = filtered_df.dropna(subset=['Driver Ratings'])
        if not driver_ratings.empty:
            fig_driver = create_histogram(
                driver_ratings, 
                'Driver Ratings', 
                "",
                nbins=20
            )
            st.plotly_chart(fig_driver, use_container_width=True)
        else:
            st.info("Dados de avalia√ß√£o de motoristas n√£o dispon√≠veis para o filtro selecionado.")

    with col2:
        st.markdown("#### Distribui√ß√£o das Avalia√ß√µes dos Clientes")
        st.markdown("Este gr√°fico mostra como os motoristas avaliam os clientes. Uma distribui√ß√£o positiva indica que a experi√™ncia de viagem √© satisfat√≥ria para ambos os lados.")
        customer_ratings = filtered_df.dropna(subset=['Customer Rating'])
        if not customer_ratings.empty:
            fig_customer = create_histogram(
                customer_ratings, 
                'Customer Rating', 
                "",
                nbins=20
            )
            st.plotly_chart(fig_customer, use_container_width=True)
        else:
            st.info("Dados de avalia√ß√£o de clientes n√£o dispon√≠veis para o filtro selecionado.")

    
    st.subheader("Resumo dos Gr√°ficos üìà")
    st.markdown("√â poss√≠vel entender pelos gr√°ficos que os motoristas em sua maior parte possuem uma avalia√ß√£o de (`4.2 - 4.3`). Por outro lado, um pouco mais alto, a avalia√ß√£o m√©dia dos clientes varia entre (`4.4 - 4.5`) ")

    '---'
    
    # ----------------- An√°lise de Cancelamentos -----------------
    st.subheader("An√°lise de Cancelamentos üö´")
    st.markdown("Identificar as **raz√µes de cancelamento** √© fundamental para melhorar a qualidade do servi√ßo. Os gr√°ficos de barras nos mostram as causas mais frequentes, permitindo que a empresa atue de forma estrat√©gica para reduzir a taxa de cancelamento.")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### Raz√µes de Cancelamento por Cliente")
        st.markdown("Este gr√°fico ajuda a entender por que os clientes est√£o desistindo de suas reservas. Problemas com o motorista, tempo de espera ou mudan√ßas de planos s√£o algumas das raz√µes comuns.")
        customer_cancellations = filtered_df.dropna(subset=['Reason for cancelling by Customer'])
        if not customer_cancellations.empty:
            cancel_reasons = customer_cancellations['Reason for cancelling by Customer'].value_counts()
            fig_cancel_customer = create_bar_chart(
                cancel_reasons.reset_index(), 
                'Reason for cancelling by Customer', 
                'count', 
                ""
            )
            st.plotly_chart(fig_cancel_customer, use_container_width=True)
        else:
            st.info("Dados de cancelamento por cliente n√£o dispon√≠veis para o filtro selecionado.")
    

    with col2:
        st.markdown("#### Raz√µes de Cancelamento por Motorista")
        st.markdown("A an√°lise das raz√µes de cancelamento por motorista √© igualmente importante, pois revela gargalos operacionais, como problemas com o cliente, localiza√ß√£o ou log√≠stica.")
        driver_cancellations = filtered_df.dropna(subset=['Driver Cancellation Reason'])
        if not driver_cancellations.empty:
            driver_cancel_reasons = driver_cancellations['Driver Cancellation Reason'].value_counts()
            fig_cancel_driver = create_bar_chart(
                driver_cancel_reasons.reset_index(), 
                'Driver Cancellation Reason', 
                'count', 
                ""
            )
            st.plotly_chart(fig_cancel_driver, use_container_width=True)
        else:
            st.info("Dados de cancelamento por motorista n√£o dispon√≠veis para o filtro selecionado.")

    st.subheader("Resumo dos Gr√°ficos üìà")
    st.markdown("√â poss√≠vel entender pelos gr√°ficos que o maior motivo do cliente cancelar as corridas, √© por conta de (`Endere√ßos errados`), ou seja, o motorista n√£o chega no local do cliente. Pelo lado do motorista, o maior motivo de cancelamento √© (`Problemas em rela√ß√£o ao cliente`).")

    '---'

    # ----------------- An√°lise Temporal -----------------
    st.subheader("An√°lise Temporal üïê")
    st.markdown("Entender o padr√£o de corridas ao longo do tempo √© crucial para otimizar a opera√ß√£o. O gr√°fico de barras por hora identifica os hor√°rios de pico, enquanto a s√©rie temporal revela a tend√™ncia geral de reservas.")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### Reservas por Hora do Dia")
        st.markdown("Este gr√°fico mostra a distribui√ß√£o de reservas ao longo de um dia. Os picos indicam as horas de maior demanda, como manh√£s e finais de tarde.")
        hourly_bookings = filtered_df.groupby('Hour').size().reset_index(name='count')
        fig_hourly = create_bar_chart(
            hourly_bookings, 
            'Hour', 
            'count', 
            ""
        )
        st.plotly_chart(fig_hourly, use_container_width=True)

    with col2:
        st.markdown("#### Tend√™ncia Di√°ria de Reservas")
        st.markdown("A s√©rie temporal nos permite visualizar a tend√™ncia de reservas ao longo dos dias, identificando padr√µes sazonais ou flutua√ß√µes anormais.")
        daily_bookings = filtered_df.groupby(filtered_df['Date'].dt.date).size().reset_index(name='count')
        daily_bookings.columns = ['Date', 'count']
        fig_daily = create_time_series(
            daily_bookings, 
            'Date', 
            'count', 
            ""
        )
        st.plotly_chart(fig_daily, use_container_width=True)

    st.subheader("Resumo dos Gr√°ficos üìà")
    st.markdown("√â poss√≠vel entender pelos gr√°ficos que o hor√°rio de pico, acontece as (`18:00`), ou seja, entre as 17:00 e 19:00, acontece a maior quantidade de corridas. Alem disso, tamb√©m enxergamos que os meses com mais corridas acontecendo s√£o (`Janeiro, Novembro e Dezembro`) ")

    '---'

    # ----------------- Pagamento e Localiza√ß√µes -----------------
    st.subheader("M√©todos de Pagamento e Localiza√ß√µes üí≥üó∫Ô∏è")
    st.markdown("Analisar a distribui√ß√£o de m√©todos de pagamento e as localiza√ß√µes de origem nos ajuda a entender o comportamento dos usu√°rios e otimizar a estrat√©gia de marketing e log√≠stica.")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### Distribui√ß√£o dos M√©todos de Pagamento")
        st.markdown("O gr√°fico de pizza revela qual a prefer√™ncia dos clientes em rela√ß√£o aos m√©todos de pagamento, informa√ß√£o crucial para estrat√©gias financeiras.")
        payment_methods = filtered_df.dropna(subset=['Payment Method'])
        if not payment_methods.empty:
            payment_counts = payment_methods['Payment Method'].value_counts()
            fig_payment = create_pie_chart(
                payment_counts.reset_index(), 
                'count', 
                'Payment Method', 
                ""
            )
            st.plotly_chart(fig_payment, use_container_width=True)
        else:
            st.info("Dados de m√©todo de pagamento n√£o dispon√≠veis para o filtro selecionado.")


    st.subheader("Resumo dos Gr√°ficos üìà")
    st.markdown("√â poss√≠vel entender pelos gr√°ficos que os m√©todos de pagamentos mais utilizados na √çndia se chamam (`UPI`),de Unified Payments Interfaces, um sistema de pagamentos instant√¢neos da √çndia e (`Dinheiro`). Tamb√©m √© poss√≠vel perceber uma quantidade parecida de locais de origem, mostrando const√¢ncia nos dados, mas o local com mais corridas √© (`Khandsa`). ")


    '---'
    
    # ----------------- Gr√°ficos de Dispers√£o e Correla√ß√£o -----------------
    st.subheader("Dispers√£o e Correla√ß√£o entre Vari√°veis üìâüìà")
    st.markdown("Com gr√°ficos, podemos visualizar a dispers√£o dos dados e a rela√ß√£o entre vari√°veis de forma intuitiva.")

    col_corr, col_dist = st.columns(2)

    with col_corr:
        st.markdown("#### Rela√ß√£o entre Valor da Corrida e Dist√¢ncia")
        st.markdown("O gr√°fico de dispers√£o mostra se h√° uma **correla√ß√£o** entre o valor de uma reserva e a dist√¢ncia percorrida. Uma nuvem de pontos que segue uma linha ascendente indica uma correla√ß√£o positiva, ou seja, viagens mais longas tendem a ser mais caras.")
        fig_scatter = px.scatter(
            filtered_df,
            x='Ride Distance',
            y='Booking Value',
            title='Valor da Reserva vs. Dist√¢ncia da Corrida',
            color_discrete_sequence=['#2A9D8F']
        )
        st.plotly_chart(fig_scatter, use_container_width=True)

    with col_dist:
        st.markdown("#### Distribui√ß√£o do Valor da Reserva")
        st.markdown("O boxplot √© ideal para visualizar a **dispers√£o** dos dados. Ele exibe a mediana (linha central), os quartis, e a presen√ßa de outliers (pontos isolados), revelando a varia√ß√£o dos valores de reserva.")
        fig_boxplot = px.box(
            filtered_df,
            y='Booking Value',
            title='Dispers√£o dos Valores de Reserva',
            color_discrete_sequence=['#E76F51']
        )
        st.plotly_chart(fig_boxplot, use_container_width=True)
    
    
    st.subheader("Resumo dos Gr√°ficos üìà")
    st.markdown("√â poss√≠vel entender pelos gr√°ficos que o valor da reserva, n√£o parece ter uma forte rela√ß√£o com o tempo da corrida, mostrando que existem (`v√°rias corridas que percorrem pouco e custam valores altos`). Al√©m disso, observamos pelo boxplot que a media de valores de corridas √© de (`414 rupias indianas`), por√©m com (`v√°rios outliers`), apenas confirmando uma rela√ß√£o fraca entre dist√¢ncia e valor.")
    
    '---'
    
    # ----------------- Medidas de Dispers√£o -----------------
    st.subheader("Medidas de Dispers√£o e Correla√ß√£o üìè")
    st.markdown("Al√©m das m√©dias, a dispers√£o nos mostra a variabilidade dos dados. Uma correla√ß√£o indica a rela√ß√£o entre duas vari√°veis.")

    col5, col6 = st.columns(2)
    with col5:
        std_dev_value = filtered_df['Booking Value'].std()
        if not pd.isna(std_dev_value):
            st.metric("Desvio Padr√£o (Valor Reserva)", f"‚Çπ{std_dev_value:.2f}")
        else:
            st.metric("Desvio Padr√£o (Valor Reserva)", "N/A")

    with col6:
        correlation = filtered_df['Booking Value'].corr(filtered_df['Ride Distance'])
        if not pd.isna(correlation):
            st.metric("Correla√ß√£o (Valor vs. Dist√¢ncia)", f"{correlation:.2f}")
        else:
            st.metric("Correla√ß√£o (Valor vs. Dist√¢ncia)", "N/A")
            
    st.markdown("""
    * **Desvio Padr√£o:** Um valor alto indica que os dados (`Booking Value`) est√£o muito espalhados em rela√ß√£o √† m√©dia. Por√©m como a m√©dia do valor reserva √© de (`414`), isso demonstra uma certa dist√¢ncia entre tais valores, o que conclui que os dados est√£o bastante espalhados e variados.
    * **Correla√ß√£o:** O valor varia de 0 a 1. Um valor pr√≥ximo de 1 indica que, √† medida que a dist√¢ncia aumenta, o valor da reserva tende a aumentar. Um valor pr√≥ximo de 0 indica pouca ou nenhuma rela√ß√£o. Com os dados que estamos utilizando, a correla√ß√£o entre Valor e Dist√¢ncia, que resultou em(`0.01`), concluimos que eles realmente possuem t√£o pouca rela√ß√£o que √© melhor considerar como sem rela√ß√£o.
    """)
    with col2:
        st.markdown("#### Top 10 Localiza√ß√µes de Origem")
        st.markdown("O gr√°fico de barras mostra as √°reas com maior demanda por corridas, permitindo que a empresa aloque mais ve√≠culos nessas regi√µes para otimizar o tempo de espera.")
        pickup_locations = filtered_df['Pickup Location'].value_counts().head(10)
        fig_pickup = create_bar_chart(
            pickup_locations.reset_index(), 
            'count', 
            'Pickup Location', 
            ""
        )
        fig_pickup.update_layout(xaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig_pickup, use_container_width=True)
    
    '---'
    
    # ----------------- Novo Teste de Hip√≥tese e IC -----------------
    st.subheader("Teste de Hip√≥tese: An√°lise de Dist√¢ncia vs. Status üßê")
    st.markdown("""
    Vamos investigar se h√° uma diferen√ßa estatisticamente significativa na **dist√¢ncia m√©dia das viagens** entre aquelas que foram **completadas** e as que foram **canceladas/incompletas**.
    
    -   **Hip√≥tese Nula (H‚ÇÄ):** A dist√¢ncia m√©dia das viagens completadas √© igual √† dist√¢ncia m√©dia das viagens canceladas/incompletas.
    -   **Hip√≥tese Alternativa (H‚Çê):** A dist√¢ncia m√©dia das viagens completadas √© diferente da dist√¢ncia m√©dia das viagens canceladas/incompletas.
    
    Para esta an√°lise, utilizamos um **Teste T de duas amostras independentes** e um **Intervalo de Confian√ßa (IC)** de 90% (Valor Normal para IC) para a diferen√ßa das m√©dias. Esse valor de IC foi escolhido pensando na quantidade de dados que estamos utilizando e na dificuldade de igualar os dois t√≥picos sendo discutidos.
    """)

    # Primeiro, verificamos se o DataFrame filtrado n√£o est√° vazio
    if filtered_df.empty:
        st.warning("O DataFrame filtrado est√° vazio. Por favor, ajuste as sele√ß√µes de filtro para ver os resultados.")
    else:
        # Filtrar os dados para as duas popula√ß√µes de interesse
        try:
            completed_distances = filtered_df[filtered_df['Booking Status'] == 'Completed']['Ride Distance'].dropna()
            
            cancelled_statuses = ['Cancelled by Customer', 'Cancelled by Driver', 'Incomplete']
            cancelled_distances = filtered_df[filtered_df['Booking Status'].isin(cancelled_statuses)]['Ride Distance'].dropna()

        except KeyError:
            st.error("As colunas 'Booking Status' ou 'Ride Distance' n√£o foram encontradas no conjunto de dados. Verifique a ortografia das colunas.")
            st.stop()
        
        # Verificamos o tamanho dos grupos de dados
        if completed_distances.empty or cancelled_distances.empty:
            st.warning("Dados insuficientes para realizar o teste de hip√≥tese. Para que o teste funcione, por favor, **ajuste o filtro 'Status da Reserva' para incluir tanto 'Completed' quanto pelo menos um tipo de 'Cancelado'**.")
        elif len(completed_distances) < 2 or len(cancelled_distances) < 2:
            st.warning("Os grupos de dados s√£o muito pequenos para realizar uma an√°lise estat√≠stica v√°lida. Por favor, ajuste os filtros.")
        else:
            # T-test e visualiza√ß√£o
            t_stat, p_value = stats.ttest_ind(completed_distances, cancelled_distances, equal_var=False)

            st.markdown("#### **Resultados do Teste T**")
            st.info(f"Estat√≠stica T: **{t_stat:.2f}**")
            st.info(f"Valor-p (p-value): **{p_value:.4f}**")

            st.markdown("#### **Interpreta√ß√£o**")
            if p_value < 0.1:
                st.success("‚úÖ **Conclus√£o:** O valor-p √© menor que 0.1. **Rejeitamos a Hip√≥tese Nula.** H√° uma diferen√ßa estatisticamente significativa na dist√¢ncia m√©dia entre viagens completadas e canceladas.")
            else:
                st.warning("‚ùå **Conclus√£o:** O valor-p √© maior que 0.1. **N√£o h√° evid√™ncia para rejeitar a Hip√≥tese Nula.** N√£o podemos afirmar que h√° uma diferen√ßa estatisticamente significativa.")

            # Visualiza√ß√£o para apoiar a interpreta√ß√£o
            mean_distances = pd.DataFrame({
                'Status': ['Completada', 'Cancelada/Incompleta'],
                'Dist√¢ncia M√©dia (km)': [completed_distances.mean(), cancelled_distances.mean()]
            })
            fig_ttest_dist = px.bar(
                mean_distances,
                x='Status',
                y='Dist√¢ncia M√©dia (km)',
                title='Dist√¢ncia M√©dia por Status da Corrida',
                color='Status',
                color_discrete_sequence=['#2A9D8F', '#E76F51']
            )
            st.plotly_chart(fig_ttest_dist, use_container_width=True)

    # ----------------- Tabela de Dados -----------------
    st.subheader("Dados Detalhados üìã")
    st.markdown("A tabela abaixo exibe uma amostra dos dados filtrados. Ela √© √∫til para uma inspe√ß√£o mais aprofundada das informa√ß√µes que alimentam os gr√°ficos e KPIs.")
    st.dataframe(
        filtered_df.head(100), 
        use_container_width=True,
        height=400
    )

# Tabs para a Pagina de Conclusao

with tab_conclusao:
    tab_conclusao2, tab_perguntas = st.tabs(["üìå Conclus√£o Geral", "‚ùì Perguntas Analisadas"])
    # Pagina de Conclusao Geral
    with tab_conclusao2:
        st.header("5. Conclus√£o e Insights Principais üéØ")
        
        st.markdown("""
        Com base nas an√°lises realizadas, destacamos os seguintes pontos cr√≠ticos e padr√µes observados:
        """)
        
        # Usando expander para cada item para deixar visual limpo
        with st.expander("An√°lise de Desempenho das Corridas"):
            st.write("""
            - **38% das corridas n√£o foram conclu√≠das**, indicando alto √≠ndice de cancelamentos.
            - O ve√≠culo predominante na √çndia √© o **Auto**, mostrando prefer√™ncia consolidada nesse modal.
            """)

        with st.expander("An√°lise de Pre√ßo e Dura√ß√£o"):
            st.write("""
            - Faixa de pre√ßo predominante: **400 a 599 rupias indianas**.
            - Tempo m√©dio das viagens: **23 a 25 minutos**, indicando padr√£o est√°vel.
            """)

        with st.expander("An√°lise de Avalia√ß√µes"):
            st.write("""
            - Motoristas: **4.2 a 4.3**
            - Clientes: **4.4 a 4.5**
            - Indica percep√ß√£o mais positiva pelos passageiros.
            """)

        with st.expander("Motivos de Cancelamento"):
            st.write("""
            - Clientes: **endere√ßos incorretos**.
            - Motoristas: **problemas relacionados ao cliente**.
            - Sugere necessidade de melhorias em geolocaliza√ß√£o e confirma√ß√£o de embarque.
            """)

        with st.expander("Picos de Demanda"):
            st.write("""
            - Hor√°rio de pico: **17h √†s 19h**, com maior concentra√ß√£o √†s 18h.
            - Meses mais movimentados: **Janeiro, Novembro e Dezembro**.
            - Indica sazonalidade e padr√µes de mobilidade urbana.
            """)

        with st.expander("M√©todos de Pagamento e Origem das Corridas"):
            st.write("""
            - Pagamentos mais comuns: **UPI** e **dinheiro**.
            - Local com mais corridas: **Khandsa**.
            - Mostra coexist√™ncia de meios digitais e tradicionais e consist√™ncia nos pontos de origem.
            """)

        with st.expander("Valor da Corrida vs Dist√¢ncia"):
            st.write("""
            - **Correla√ß√£o fraca** entre dist√¢ncia e valor.
            - Presen√ßa de viagens curtas com valores altos.
            - Outros fatores (demanda, localiza√ß√£o, hor√°rio) impactam o pre√ßo.
            """)

        with st.expander("Dist√¢ncia M√©dia: Completadas vs Canceladas"):
            st.write("""
            - **Teste T de duas amostras independentes**
            - Estat√≠stica T: 91.93 | Valor-p: 0.0000
            - **Rejeita-se H‚ÇÄ**, confirmando diferen√ßa significativa.
            - Corridas mais longas possuem maior taxa de conclus√£o.
            """)

    # Pagina de Resposta as Perguntas
    with tab_perguntas:
        st.header("Respostas Anal√≠ticas √†s Perguntas ‚ùì")
        
        tabs = st.tabs([
            "1Ô∏è‚É£ Hor√°rios de Pico", 
            "2Ô∏è‚É£ Motivos de Cancelamento", 
            "3Ô∏è‚É£ Formas de Pagamento", 
            "4Ô∏è‚É£ Valor vs Dist√¢ncia", 
            "5Ô∏è‚É£ Dist√¢ncia M√©dia", 
            "6Ô∏è‚É£ Fatores do Valor"
        ])

        # Hor√°rios de Pico
        with tabs[0]:
            st.write("""
            O **hor√°rio de maior demanda** ocorre por volta das **18h**, dentro do intervalo de 17h √†s 19h. 
            Essa tend√™ncia est√° associada ao aumento da mobilidade urbana p√≥s-expediente, devendo ser considerada para otimiza√ß√£o de frota e estrat√©gias operacionais.
            """)

        # Motivos de Cancelamento
        with tabs[1]:
            st.write("""
            - Clientes cancelam principalmente por **endere√ßos incorretos**.
            - Motoristas cancelam por **problemas relacionados ao cliente**.
            - Indica necessidade de **melhoria na comunica√ß√£o e geolocaliza√ß√£o**.
            """)

        # Formas de Pagamento
        with tabs[2]:
            st.write("""
            - **UPI (Unified Payments Interface)** e **Dinheiro** s√£o predominantes.
            - Reflete coexist√™ncia entre meios digitais e f√≠sicos, exigindo flexibilidade nos pagamentos.
            """)

        # Valor vs Dist√¢ncia
        with tabs[3]:
            st.write("""
            - **Correla√ß√£o fraca** entre dist√¢ncia percorrida e valor.
            - Outliers indicam viagens curtas com pre√ßos elevados.
            - Fatores como **demanda, hor√°rio e localiza√ß√£o** influenciam o valor.
            """)

        # Dist√¢ncia M√©dia
        with tabs[4]:
            st.write("""
            - **Teste T:** estat√≠stica T = 91.93, valor-p = 0.0000
            - Dist√¢ncias de viagens completadas s√£o significativamente maiores que das canceladas.
            - Implica que corridas mais longas t√™m maior chance de conclus√£o.
            """)

        # Fatores do Valor
        with tabs[5]:
            st.write("""
            - Valores das viagens **n√£o se baseiam apenas na dist√¢ncia**.
            - **Hor√°rio, demanda, localiza√ß√£o e tipo de ve√≠culo** impactam fortemente o pre√ßo.
            - Sistema de tarifa√ß√£o √© multifatorial, exigindo maior clareza para percep√ß√£o de justi√ßa nos pre√ßos.
            """)